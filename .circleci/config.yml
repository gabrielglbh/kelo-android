version: 2.1

orbs:
  android: circleci/android@1.0.3
  codecov: codecov/codecov@1.0.2
  coverage-reporter: codacy/coverage-reporter@12.1.4

# References are chunks of instructions to be executed multiple times across jobs
references:
  android_config: &android_config
    working_directory: ~/src

    docker:
      - image: circleci/android:api-30

    # Sets up the memory for Gradle and JVM to use.
    # Usually for the emulator to run, JVM and Gradle consume a lot of memory, it is unstable.
    # Parameters are set to not consume too much memory.
    environment:
      TERM: dumb
      JVM_OPTS: '-Xms2048m -Xmx3g'
      GRADLE_OPTS: '-Xmx3g -Dorg.gradle.daemon=false -Dorg.gradle.max-workers=2 -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.jvmargs="-Xmx3g -XX:+HeapDumpOnOutOfMemoryError"'

  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: bundle install

  restore_android_cache: &restore_android_cache
    restore_cache:
      key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  save_android_cache: &save_android_cache
    save_cache:
      paths:
        - ~/.gradle
      key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

  # Creates the keystore.properties file to sign the app when building releases
  # It is based of ENV variables set up in Circle CI
  create_keystore_properties: &create_keystore_properties
    run:
      name: Create keystore.properties
      command: |
        echo $RELEASE_KEYSTORE | base64 -d > $STORE_KEY_FILE
        printf 'keyAlias=%s\nkeyPassword=%s\nstoreFile=%s\nstorePassword=%s' \
            $RELEASE_KEY_ALIAS $RELEASE_KEY_PASSWORD $STORE_KEY_FILE $RELEASE_STORE_PASSWORD > keystore.properties

  # Creates the google-api-key.json file to allow fastlane to launch releases into Google Play
  # It is based of ENV variables set up in Circle CI
  create_google_play_key: &create_google_play_key
    run:
      name: Create Google Play Key
      command: echo $GOOGLE_PLAY_KEY | base64 -d > fastlane/google-api-key.json

jobs:
  tests:
    executor:
      name: android/android-machine
      resource-class: medium
    steps:
      - checkout
      - *create_keystore_properties
      - *restore_android_cache

      - run:
          name: List of System Images
          command: sdkmanager --list

      - android/create-avd:
          avd-name: testDevice
          install: true
          system-image: system-images;android-29;google_apis;x86

      # Skin is needed as the device by default has a very small screen
      # Note that running UI Tests is unstable and some may fail. That is why,
      # in the gradle:app we ignore the failures on UI Tests
      - android/start-emulator:
          avd-name: testDevice
          additional-args: '-skin 1440x3040'
          restore-gradle-cache-prefix: v1a

      # Custom gradle command to execute all tests: unit test and instrumented ones
      # that also create a code coverage report
      - run:
          name: Run Instrumented (Integration & UI) and Unit Tests
          command: ./gradlew codecovReport

      - codecov/upload:
          file: app/build/reports/jacoco/codecovReport/codecovReport.xml
          token: $CODECOV_TOKEN

      - coverage-reporter/send_report:
          coverage-reports: app/build/reports/jacoco/codecovReport/codecovReport.xml
          project-token: $CODACY_PROJECT_TOKEN

      - android/kill-emulators

      - *save_android_cache

      - android/save-gradle-cache:
          cache-prefix: v1a

  alpha_deploy:
    <<: *android_config

    steps:
      - checkout
      - *ruby_dependencies
      - *create_keystore_properties
      - *create_google_play_key
      - *android_dependencies
      - *restore_android_cache

      - run:
          name: Upload to Google Play Alpha Channel
          command: bundle exec fastlane alpha

      - *save_android_cache

  production_deploy:
    <<: *android_config

    steps:
      - checkout
      - *ruby_dependencies
      - *create_keystore_properties
      - *create_google_play_key
      - *android_dependencies
      - *restore_android_cache

      - run:
          name: Deploy to Play Store with Production track
          command: bundle exec fastlane production

      - *save_android_cache

workflows:
  version: 2.1
  workflow:
    # Run tests when pushed to development or main
    # Deploy to ALPHA when unit and instrumentation tests have succeeded and only in main branch
    # Deploy to PRODUCTION when unit and instrumentation tests have succeeded and only when the branch has a tag
    jobs:
      - tests:
          filters:
            branches:
              only: main
      - alpha_deploy:
          filters:
            tags:
              only: /^v.*-beta/
            branches:
              ignore: /.*/
      - production_deploy:
          filters:
            tags:
              only: /^((?!beta).)*$/
            branches:
              ignore: /.*/